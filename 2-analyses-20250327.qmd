---
title: "Predicting HRQoL using Tobit regression"
author: "Roemer J. Janse"
format: docx
execute:
    echo: false
date: 2025-04-23
---

# 0. Set-up
```{r set-up}
# Load packages
pacman::p_load("conflicted",      # Package conflicts
               "here",            # Relative directories
               "dplyr",           # Data wrangling
               "magrittr",        # Efficient pipelines
               "purrr",           # Functional programming
               "stringr",         # Working with character strings
               "tidyr",           # Pivoting data
               "splines",         # Spline functions
               "tableone",        # Baseline characteristics table
               "survival",        # Fit Tobit type 1 model
               "sampleSelection", # Fit Tobit type 2 model
               "DescTools",       # C-statistic for binary model
               "ggplot2",         # Data visualisation
               "ggExtra",         # Adding marginal distributions
               "patchwork",       # Adding plots together
               "knitr"            # Printing tables to word
)

# Solve conflicts
conflicts_prefer(dplyr::filter)       # Between dplyr & stats
conflicts_prefer(magrittr::extract)   # Between tidyr & magrittr
conflicts_prefer(dplyr::select)       # Between dplyr & MASS
conflicts_prefer(patchwork::area)     # Between patchwork & MASS

# Source relevant functions
walk(list.files(here("funs")), ~ source(here(paste0("funs/", .x))))

# Set working directory
path <- "C:/users/rjjanse.lumcnet/onedrive - lumc/research/projects/17. tobit_hrqol/data/dataframes/"

# Set directory for figures
figs <- "C:/users/rjjanse.lumcnet/onedrive - lumc/research/projects/17. tobit_hrqol/figures/"

# Load data
load(paste0(path, "dat_imputed.Rdata")) 

# Calculate pooled outcome for each individual
dat_imputed %<>% 
    # Arrange for grouping
    arrange(studynr, .imp) %>%
    # Group per individual
    group_by(studynr) %>%
    # Calculate mean outcome for each possible outcome
    mutate(across(c(pcs_6, pcs_12, mcs_6, mcs_12),
                  \(x) x = mean(x, na.rm = TRUE),
                  .names = "{.col}_pooled")) %>%
    # Remove grouping structure
    ungroup() %>%
    # Rearrange on imputation, then studynr
    arrange(.imp, studynr)

```

# 1. Descriptive tbales
## 1.1. Table one
```{r table one}
# Get unimputed data
dat_unimp <- filter(dat_imputed, .imp == 0)

# Specify which variables in the dataset to include in the baseline table
vec_var <- c(
    # General information
    "age", "sex", "burgstaat", "woonsituatie", "partner", 
    # Vitals
    "bpsyst", "bpdiast", "bmi", "smoking",
    # Kidney/dialysis related
    "pkd", "modality", "acute_pt", "prev_ntx", "med_epo", "med_iron",
    # Comorbidities
    "cbd", "dementia", "dm", "ihd", "lvd", "malign", "pvd", "psych",
    # Laboratory
    "hb", "na", "chol", "pth",
    # PROMs
    "pcs_0", "mcs_0", "sc", "sb"
)

# Specify which variables are continuous
vec_cnt <- c("age", "bpsyst", "bpdiast", "bmi", "hb", "na", "chol", "pth", "pcs_0", "mcs_0", "sc", "sb")

# Specify that all variables not continuous are categorical
vec_cat <- vec_var[!vec_var %in% vec_cnt]

# Make baseline table 
tab_one <- CreateTableOne(vars = vec_var, 
                          data = dat_unimp, 
                          factorVars = vec_cat) %>%
    # Print to matrix
    print(printToggle = FALSE, 
          contDigits = 1,
          nonnormal = c("age", "bmi", "chol", "pth", "mcs_0", "pcs_0", "sb", "sc")) %>%
    # To data frame
    as.data.frame() %>%
    # Add big marks and remove redundant whitespace
    mutate(# Big marks
           Overall = prettyNum(Overall, big.mark = ","),
           # Remove redundant whitespace
           Overall = str_replace_all(Overall, "(?<=\\()\\s+(?=\\d)", "")) %>%
    # Set back to matrix
    as.matrix() %>%
    # Add labels
    set_rownames(c("Number of individuals",
                   "Age, years, median [IQR]",
                   "Female, n (%)",
                   "Civil status, n (%)", "Single", "Married/cohabitating", "Divorced", "Widowed",
                   "Living situation, n (%)", "Alone", "With partner", "With parents", "With family", "Caring home",
                   "Presence of partner, n (%)",
                   "Systolic blood pressure, mmHg, mean (SD)",
                   "Diastolic blood pressure, mmHg, mean (SD)",
                   "BMI, kg/m2, median [IQR]",
                   "Smoking, n (%)", "Never", "Current", "Quit",
                   "Primary kidney disease, n (%)", "Diabetes mellitus", "Familial/hereditary nephropathies", "Glomerular disease",
                   "Hypertension/renal vascular disease", "Tubulointerstitial disease", "Other systemic diseases affecting the kidney",
                   "Miscellaneous renal disorders",
                   "Initiated PD, n (%)",
                   "Acute initiation, n (%)",
                   "Previous KTx, n (%)",
                   "ESA use",
                   "Iron suppletion",
                   "Cerebrovascular disease",
                   "Dementia", 
                   "Diabetes Mellitus",
                   "Ischemic heart disease",
                   "Left ventricular dysfunction",
                   "Malignancy",
                   "Peripheral vascular disease",
                   "Psychiatric disorder",
                   "Hb, mmol/L, mean (SD)",
                   "Sodium, mean (SD)",
                   "Cholesterol, median (IQR)",
                   "PTH, median [IQR]",
                   "PCS, median [IQR]",
                   "MCS, median [IQR]",
                   "Symptom count, median [IQR]",
                   "Symptom burden, median [IQR]"))

# Kable table
kable(tab_one)

```

## 1.2. Missingness table
```{r missingness table}
# Change data to missingness indicators
dat_missing <- dat_unimp %>%
    # Keep only relevant columns
    select(-c(studynr, mtpnt_dt, stop_dt, stop_red, .imp, .id, dsi_symp_1:dsi_symp_30, kdqol_last_pain, kdqol_symp_pain,
              sc_15, sb_15, pcs_6, pcs_12, mcs_6, mcs_12, cens_6, cens_12, pcs_6_t1, pcs_12_t1, mcs_6_t1, mcs_12_t1,
              pcs_6_pooled, pcs_12_pooled, mcs_6_pooled, mcs_12_pooled, ttc_6, ttc_12, dial_dt)) %>%
    # Create missingness indicators
    mutate(across(everything(), \(x) if_else(is.na(x), 1, 0))) %>%
    # Set column names of DSI and SF-12 to double-digit numbers to make sorting work
    set_colnames(str_replace_all(colnames(.), "(?<=last_|sf12_)(?=\\d$)", "0"))

# Specify which variables in the dataset to include in the table
vec_var <- sort(colnames(dat_missing))

# Make baseline table 
tab_missing <- CreateTableOne(vars = vec_var, 
                              data = dat_missing, 
                              factorVars = vec_var) %>%
    # Print to matrix
    print(printToggle = FALSE) %>%
    # To data frame
    as.data.frame() %>%
    # Reset single level variables, add big marks and remove redundant whitespace
    mutate(# Set variables with no missing to 0 (0)
           Overall = str_replace_all(Overall, "2110 \\(100\\.0\\)", "0 (0)"),
           # Big marks
           Overall = prettyNum(Overall, big.mark = ","),
           # Remove redundant whitespace
           Overall = str_replace_all(Overall, "(?<=\\()\\s+(?=\\d)", "")) %>%
    # Set back to matrix
    as.matrix() %>%
    # Add labels
    set_rownames(c("Number of individuals",
                   "Acute initiation",
                   "Age",
                   "AIDS",
                   "BMI",
                   "Diastolic blood pressure",
                   "Systolic blood pressure",
                   "Civil status",
                   "Cerebrovascular diseae",
                   "Cholesterol",
                   "Dementia",
                   "Diabetes mellitus",
                   "DSI - Constipation",
                   "DSI - Nausea",
                   "DSI - Vomiting",
                   "DSI - Diarrhea",
                   "DSI - Decreased appetite",
                   "DSI - Muscle cramps",
                   "DSI - Swelling in legs",
                   "DSI - Lightheadedness or dizziness",
                   "DSI - Shortness of breath",
                   "DSI - Restless legs or difficulty keeping legs still",
                   "DSI - Numbness or tingling in feet",
                   "DSI - Feeling tired or lack of energy",
                   "DSI - Cough",
                   "DSI - Dry mouth",
                   "DSI - Bone or joint pain",
                   "DSI - Chest pain",
                   "DSI - Headache",
                   "DSI - Muscle soreness",
                   "DSI - Difficulty concentrating",
                   "DSI - Dry skin",
                   "DSI - Itching",
                   "DSI - Worrying",
                   "DSI - Feeling nervous",
                   "DSI - Trouble falling asleep",
                   "DSI - Trouble staying asleep",
                   "DSI - Feeling irritable",
                   "DSI - Feeling sad",
                   "DSI - Feeling anxious",
                   "DSI - Decreased interest in sex",
                   "DSI - Difficulty becoming aroused",
                   "Hb",
                   "Height",
                   "Hemiplegia",
                   "Ischemic heart disease",
                   "Leukemia",
                   "Mild liver disease",
                   "Severe liver diseae",
                   "Left ventricular dysfunction",
                   "Lymphoma",
                   "Malignancy",
                   "Metastatic malignancy",
                   "Non-metastatic malignancy",
                   "MCS",
                   "ESA use",
                   "Iron use",
                   "Dialysis modality",
                   "Sodium",
                   "Parathyroidectomy",
                   "Presence of partner",
                   "PCS",
                   "Primary kidney disease",
                   "Previous dialysis",
                   "Previous KTx",
                   "Psychiatric disorder",
                   "PTH",
                   "Pulmonary disease",
                   "Peripheral vascular disease",
                   "Residual diuresis",
                   "Symptom burden",
                   "Symptom count",
                   "Systemic disease",
                   "Female",
                   "SF12 - General health",
                   "SF12 - Moderate physical activities",
                   "SF12 - Climbing several flights of stairs",
                   "SF12 - Accomplished less",
                   "SF12 - Limited in work or activities",
                   "SF12 - Accomplished less, physical",
                   "SF12 - Not careful in work or activities",
                   "SF12 - Pain interference, emotional",
                   "SF12 - Feeling calm and peaceful",
                   "SF12 - Having a lot of energy",
                   "SF12 - Feeling downhearted and blue",
                   "SF12 - Interference with social activities",
                   "Smoking",
                   "Ulcer",
                   "Weight",
                   "Living situation"))

# Kable table
kable(tab_missing)

```

## 1.3. DSI table
```{r dsi table}
# Get DSI data for symptom presence
dat_dsi_symp <- dat_unimp %>%
    # Keep only DSI variables
    select(contains("dsi_symp")) %>%
    # Pivot to long format (one row per DSI question)
    pivot_longer(everything()) %>%
    # Set names to only number
    mutate(name = as.numeric(str_extract(name, "\\d{1,2}"))) %>%
    # Remove missing values in value
    filter(!is.na(value)) %>%
    # Arrange to group per question
    arrange(name) %>%
    # Group per question
    group_by(name) %>%
    # Calculate proportion per question
    summarise(symp = paste0(sum(value, na.rm = TRUE), " (",
                            format(round(mean(value, na.rm = TRUE) * 100, 1), nsmall = 1), ")")) %>%
    # Remove grouping structure
    ungroup()

# Get DSI data for symptom burden
dat_dsi_last <- dat_unimp %>%
    # Keep only DSI variables
    select(contains("dsi_last")) %>%
    # Pivot to long format (one row per DSI question)
    pivot_longer(everything()) %>%
    # Set names to only number
    mutate(name = as.numeric(str_extract(name, "\\d{1,2}"))) %>%
    # Remove missing values in value and individuals without the symptom
    filter(!is.na(value) & value != 0) %>%
    # Arrange to group per question
    arrange(name) %>%
    # Group per question
    group_by(name) %>%
    # Calculate proportion per question
    summarise(last = paste0(median(value, na.rm = TRUE), " [",
                            quantile(value, probs = 0.25, na.rm = TRUE), "-",
                            quantile(value, probs = 0.75, na.rm = TRUE), "]")) %>%
    # Remove grouping structure
    ungroup()

# Add symptom presence and burden together and create table
dat_dsi <- left_join(dat_dsi_symp, dat_dsi_last, "name") %>%
    # Drop symptom number column
    select(-name) %>%
    # Change to matrix
    as.matrix() %>%
    # Set column names
    set_colnames(c("Presence, n (%)", "Burden, median [IQR]")) %>%
    # Set rownames
    set_rownames(c("Constipation",
                   "Nausea",
                   "Vomiting",
                   "Diarrhea",
                   "Decreased appetite",
                   "Muscle cramps",
                   "Swelling in legs",
                   "Lightheadedness or dizziness",
                   "Shortness of breath",
                   "Restless legs or difficulty keeping legs still",
                   "Numbness or tingling in feet",
                   "Feeling tired or lack of energy",
                   "Cough",
                   "Dry mouth",
                   "Bone or joint pain",
                   "Chest pain",
                   "Headache",
                   "Muscle soreness",
                   "Difficulty concentrating",
                   "Dry skin",
                   "Itching",
                   "Worrying",
                   "Feeling nervous",
                   "Trouble falling asleep",
                   "Trouble staying asleep",
                   "Feeling irritable",
                   "Feeling sad",
                   "Feeling anxious",
                   "Decreased interest in sex",
                   "Difficulty becoming aroused"))

# Print table
kable(dat_dsi)

```

# 2. Linearity checks
## 2.1. HRQoL components (PCS and MCS)
```{r linearity checks outcome}
# PCS at 6 months
ggsave("lin_pcs_6.png",
       linearity_check_hrqol("pcs_6_t1"),
       path = figs,
       width = 7.5,
       height = 7.5,
       dpi = 600)

# MCS at 6 months
ggsave("lin_mcs_6.png",
       linearity_check_hrqol("mcs_6_t1"),
       path = figs,
       width = 7.5,
       height = 7.5,
       dpi = 600)

# PCS at 12 months
ggsave("lin_pcs_12.png",
       linearity_check_hrqol("pcs_12_t1"),
       path = figs,
       width = 7.5,
       height = 7.5,
       dpi = 600)

# MCS at 12 months
ggsave("lin_mcs_12.png",
       linearity_check_hrqol("mcs_12_t1"),
       path = figs,
       width = 7.5,
       height = 7.5,
       dpi = 600)

```

## 2.2. Censoring
```{r linearity checks selection}
# Censoring at 6 months
ggsave("lin_cens_6.png",
       linearity_check_censor("cens_6"),
       path = figs,
       width = 7.5,
       height = 7.5,
       dpi = 600)

# Censoring at 12 months
ggsave("lin_cens_12.png",
       linearity_check_censor("cens_12"),
       path = figs,
       width = 7.5,
       height = 7.5,
       dpi = 600)


```

# 3. Outcomes at 6 months
## 3.1. PCS
### 3.1.1. Tobit type 1
```{r t1-06-pcs}
# Set right hand side of formula
form_rhs <- "ns(age, knots = 80) + pcs_0 + ns(mcs_0, knots = 55) + ns(bmi, knots = 40) + ihd + ns(hb, knots = c(5, 6.2)) + ns(sc, knots = 12) + ns(sb, knots = 30) + ns(pth, knots = 50) + partner + pkd + sex + smoking + modality"

# Develop model
fit_t1_6_pcs <- fit <- t1_dev(dat_imputed, "pcs_6_t1", form_rhs)

# Get predictions and make data frame
dat_prd <- t1_prd(dat_imputed, "pcs_6_t1", fit) %>%
    # Bind columns
    bind_cols() %>%
    # Add weights and observed value
    mutate(# IPCW
           w = ipcw(dat_imputed, "cens_6"),
           # True value
           true_y = filter(dat_imputed, .imp == 1)[["pcs_6_pooled"]])

# Calculate pseudo R-squared
r2 <- dat_prd %$% pseudo_r2(lps, fit[["scale"]])

 # Get model calibration
cal <- t1_cal(dat_prd, "6-month PCS score")

# Get cross-validation results
cv <- t1_cv(dat_imputed, "pcs_6_t1", "6-month PCS score", form_rhs)

# Create table section
tab_t1_6_pcs <- tibble(metric = c("Tobit type 1", "r2", "citl", "cslope"),
                       apparent_pcs_6 = c(NA, r2, cal[["citl"]], cal[["cslope"]]),
                       internal_pcs_6 = c(NA, cv[["r2"]], cv[["citl"]], cv[["cslope"]]))

# Store plots in specific names
p_app_t1_6_pcs <- cal[["plot"]]; p_int_t1_6_pcs <- cv[["plot"]]

```

### 3.1.2. Tobit type 2
```{r t2-06-pcs}
# Set right hand side of formula for selection model
selection_form_rhs <- "ns(age, knots = c(40, 80)) + sex + ns(hb, knots = c(5, 6.2, 8)) + ns(bpsyst, knots = 125) + bmi + ihd + malign + modality + dm + pkd + ns(pcs_0, knots = 35) + ns(mcs_0, knots = 55) + ns(sc, knots = c(9, 12)) + ns(sb, knots = c(25, 45))" 

# Set right hand side of formula for outcome model
outcome_form_rhs <- "ns(age, knots = 80) + pcs_0 + ns(mcs_0, knots = 55) + ns(bmi, knots = 40) + ihd + ns(hb, knots = c(5, 6.2)) + ns(sc, knots = 12) + ns(sb, knots = 30) + ns(pth, knots = 50) + partner + pkd + sex + smoking + modality"

# Develop model
fit_t2_6_pcs <- fit <- t2_dev(dat_imputed, "pcs_6", selection_form_rhs, outcome_form_rhs)

# Get predictions and make data frame
dat_prd <- t2_prd(dat_imputed, "pcs_6", "cens_6", fit) %>%
    # Bind columns
    bind_cols() %>%
    # Add weights and observed value
    mutate(# IPCW 
           w = 1 / pr,
           # True value
           true_y = filter(dat_imputed, .imp == 1)[["pcs_6_pooled"]])

# Calculate pseudo R-squared
r2 <- dat_prd %$% pseudo_r2(lps_o, fit[["sigma_o"]])

# Get model calibration
cal <- t2_cal(dat_prd, "6-month PCS score", plot_s_title = "Selection")

# Get cross-validation results
cv <- t2_cv(dat_imputed, "pcs_6", "6-month PCS score", selection_form_rhs, outcome_form_rhs, plot_s_title = "Selection")

# Create table section
tab_t2_6_pcs <- tibble(metric = c("Tobit type 2", "o", "r2", "citl", "cslope", "s", "citl_s", "cslope_s", "c-statistic"),
                       apparent_pcs_6 = c(NA, NA, r2, cal[["citl_o"]], cal[["cslope_o"]], NA, cal[["citl_s"]], cal[["cslope_s"]], cal[["c"]]),
                       internal_pcs_6 = c(NA, NA, cv[["r2"]], cv[["citl_o"]], cv[["cslope_o"]], NA, cv[["citl_s"]], cv[["cslope_s"]], cv[["c"]]))

# Store outcome plots in specific names
p_app_t2_6_pcs_o <- cal[["plot_o"]]; p_int_t2_6_pcs_o <- cv[["plot_o"]]

# Store selection plots in specific names
p_app_t2_6_pcs_s <- cal[["plot_s"]]; p_int_t2_6_pcs_s <- cv[["plot_s"]]

# Combine tables
tab_6_pcs <- bind_rows(tab_t1_6_pcs, tab_t2_6_pcs)

```

## 3.2. MCS
### 3.2.1. Tobit type 1
```{r t1-06-mcs}
# Set right hand side of formula
form_rhs <- "ns(age, knots = 75) + ns(pcs_0, knots = 32) + mcs_0 + bmi + ihd + ns(hb, knots = c(5, 6.2, 8)) + ns(sc, knots = 12) + ns(sb, knots = 75) + ns(pth, knots = 50) + partner + pkd + sex + smoking + modality"

# Develop model
fit_t1_6_mcs <- fit <- t1_dev(dat_imputed, "mcs_6_t1", form_rhs)

# Get predictions and make data frame
dat_prd <- t1_prd(dat_imputed, "mcs_6_t1", fit) %>%
    # Bind columns
    bind_cols() %>%
    # Add weights and observed value
    mutate(# IPCW
           w = ipcw(dat_imputed, "cens_6"),
           # True value
           true_y = filter(dat_imputed, .imp == 1)[["mcs_6_pooled"]])

# Calculate pseudo R-squared
r2 <- dat_prd %$% pseudo_r2(lps, fit[["scale"]])

 # Get model calibration
cal <- t1_cal(dat_prd, "6-month MCS score")

# Get cross-validation results
cv <- t1_cv(dat_imputed, "mcs_6_t1", "6-month MCS score", form_rhs)

# Create table section
tab_t1_6_mcs <- tibble(metric = c("Tobit type 1", "r2", "citl", "cslope"),
                       apparent_mcs_6 = c(NA, r2, cal[["citl"]], cal[["cslope"]]),
                       internal_mcs_6 = c(NA, cv[["r2"]], cv[["citl"]], cv[["cslope"]]))

# Store plots in specific names
p_app_t1_6_mcs <- cal[["plot"]]; p_int_t1_6_mcs <- cv[["plot"]]

```

### 3.2.2. Tobit type 2
```{r t2-06-mcs}
# Set right hand side of formula for selection model
selection_form_rhs <- "ns(age, knots = c(40, 80)) + sex + ns(hb, knots = c(5, 6.2, 8)) + ns(bpsyst, knots = 125) + bmi + ihd + malign + modality + dm + pkd + ns(pcs_0, knots = 35) + ns(mcs_0, knots = 55) + ns(sc, knots = c(9, 12)) + ns(sb, knots = c(25, 45))" 

# Set right hand side of formula for outcome model
outcome_form_rhs <- "ns(age, knots = 75) + ns(pcs_0, knots = 32) + mcs_0 + bmi + ihd + ns(hb, knots = c(5, 6.2, 8)) + ns(sc, knots = 12) + ns(sb, knots = 75) + ns(pth, knots = 50) + partner + pkd + sex + smoking + modality"

# Develop model
fit_t2_6_mcs <- fit <- t2_dev(dat_imputed, "mcs_6", selection_form_rhs, outcome_form_rhs)

# Get predictions and make data frame
dat_prd <- t2_prd(dat_imputed, "mcs_6", "cens_6", fit) %>%
    # Bind columns
    bind_cols() %>%
    # Add weights and observed value
    mutate(# IPCW 
           w = 1 / pr,
           # True value
           true_y = filter(dat_imputed, .imp == 1)[["mcs_6_pooled"]])

# Calculate pseudo R-squared
r2 <- dat_prd %$% pseudo_r2(lps_o, fit[["sigma_o"]])

# Get model calibration
cal <- t2_cal(dat_prd, "6-month MCS score")

# Get cross-validation results
cv <- t2_cv(dat_imputed, "mcs_6", "6-month MCS score", selection_form_rhs, outcome_form_rhs)

# Create table section
tab_t2_6_mcs <- tibble(metric = c("Tobit type 2", "o", "r2", "citl", "cslope", "s", "citl_s", "cslope_s", "c-statistic"),
                       apparent_mcs_6 = c(NA, NA, r2, cal[["citl_o"]], cal[["cslope_o"]], NA, cal[["citl_s"]], cal[["cslope_s"]], cal[["c"]]),
                       internal_mcs_6 = c(NA, NA, cv[["r2"]], cv[["citl_o"]], cv[["cslope_o"]], NA, cv[["citl_s"]], cv[["cslope_s"]], cv[["c"]]))

# Store outcome plots in specific names
p_app_t2_6_mcs_o <- cal[["plot_o"]]; p_int_t2_6_mcs_o <- cv[["plot_o"]]

# Store selection plots in specific names
p_app_t2_6_mcs_s <- cal[["plot_s"]]; p_int_t2_6_mcs_s <- cv[["plot_s"]]

# Combine tables
tab_6_mcs <- bind_rows(tab_t1_6_mcs, tab_t2_6_mcs)

# Combine tables
tab_6 <- bind_cols(tab_6_pcs, select(tab_6_mcs, -metric))

```

# 4. Outcomes at 12 months
## 4.1. PCS
### 4.1.1. Tobit type 1
```{r t1-12-pcs}
# Set right hand side of formula
form_rhs <- "ns(age, knots = 80) + pcs_0 + ns(mcs_0, knots = 55) + ns(bmi, knots = 40) + ihd + ns(hb, knots = c(5, 6.2)) + ns(sc, knots = 12) + ns(sb, knots = 30) + ns(pth, knots = 50) + partner + pkd + sex + smoking + modality"

# Develop model
fit_t1_12_pcs <- fit <- t1_dev(dat_imputed, "pcs_12_t1", form_rhs)

# Get predictions and make data frame
dat_prd <- t1_prd(dat_imputed, "pcs_12_t1", fit) %>%
    # Bind columns
    bind_cols() %>%
    # Add weights and observed value
    mutate(# IPCW
           w = ipcw(dat_imputed, "cens_12"),
           # True value
           true_y = filter(dat_imputed, .imp == 1)[["pcs_12_pooled"]])

# Calculate pseudo R-squared
r2 <- dat_prd %$% pseudo_r2(lps, fit[["scale"]])

 # Get model calibration
cal <- t1_cal(dat_prd, "12-month PCS score")

# Get cross-validation results
cv <- t1_cv(dat_imputed, "pcs_12_t1", "12-month PCS score", form_rhs)

# Create table section
tab_t1_12_pcs <- tibble(metric = c("Tobit type 1", "r2", "citl", "cslope"),
                       apparent_pcs_12 = c(NA, r2, cal[["citl"]], cal[["cslope"]]),
                       internal_pcs_12 = c(NA, cv[["r2"]], cv[["citl"]], cv[["cslope"]]))

# Store plots in specific names
p_app_t1_12_pcs <- cal[["plot"]]; p_int_t1_12_pcs <- cv[["plot"]]

```

### 4.1.2. Tobit type 2
```{r t2-12-pcs}
# Set right hand side of formula for selection model
selection_form_rhs <- "ns(age, knots = c(40, 80)) + sex + ns(hb, knots = c(5, 6.2, 8)) + ns(bpsyst, knots = 125) + bmi + ihd + malign + modality + dm + pkd + ns(pcs_0, knots = 35) + ns(mcs_0, knots = 55) + ns(sc, knots = c(9, 12)) + ns(sb, knots = c(25, 45))" 

# Set right hand side of formula for outcome model
outcome_form_rhs <- "ns(age, knots = 80) + pcs_0 + ns(mcs_0, knots = 55) + ns(bmi, knots = 40) + ihd + ns(hb, knots = c(5, 6.2)) + ns(sc, knots = 12) + ns(sb, knots = 30) + ns(pth, knots = 50) + partner + pkd + sex + smoking + modality"

# Develop model
fit_t2_12_pcs <- fit <- t2_dev(dat_imputed, "pcs_12", selection_form_rhs, outcome_form_rhs)

# Get predictions and make data frame
dat_prd <- t2_prd(dat_imputed, "pcs_12", "cens_12", fit) %>%
    # Bind columns
    bind_cols() %>%
    # Add weights and observed value
    mutate(# IPCW 
           w = 1 / pr,
           # True value
           true_y = filter(dat_imputed, .imp == 1)[["pcs_12_pooled"]])

# Calculate pseudo R-squared
r2 <- dat_prd %$% pseudo_r2(lps_o, fit[["sigma_o"]])

# Get model calibration
cal <- t2_cal(dat_prd, "12-month PCS score",
              inset_coords = c(0.6, 0.0625, 0.975, 0.4),
              plot_s_title = "Selection")

# Get cross-validation results
cv <- t2_cv(dat_imputed, 
            "pcs_12", 
            "12-month PCS score", 
            selection_form_rhs, 
            outcome_form_rhs,
            inset_coords = c(0.6, 0.0625, 0.975, 0.4), 
            plot_s_title = "Selection")

# Create table section
tab_t2_12_pcs <- tibble(metric = c("Tobit type 2", "o", "r2", "citl", "cslope", "s", "citl_s", "cslope_s", "c-statistic"),
                       apparent_pcs_12 = c(NA, NA, r2, cal[["citl_o"]], cal[["cslope_o"]], NA, cal[["citl_s"]], cal[["cslope_s"]], cal[["c"]]),
                       internal_pcs_12 = c(NA, NA, cv[["r2"]], cv[["citl_o"]], cv[["cslope_o"]], NA, cv[["citl_s"]], cv[["cslope_s"]], cv[["c"]]))

# Store outcome plots in specific names
p_app_t2_12_pcs_o <- cal[["plot_o"]]; p_int_t2_12_pcs_o <- cv[["plot_o"]]

# Store selection plots in specific names
p_app_t2_12_pcs_s <- cal[["plot_s"]]; p_int_t2_12_pcs_s <- cv[["plot_s"]]

# Combine tables
tab_12_pcs <- bind_rows(tab_t1_12_pcs, tab_t2_12_pcs)

```

## 4.2. MCS
### 4.2.1. Tobit type 1
```{r t1-12-mcs}
# Set right hand side of formula
form_rhs <- "ns(age, knots = 75) + ns(pcs_0, knots = 32) + mcs_0 + bmi + ihd + ns(hb, knots = c(5, 6.2, 8)) + ns(sc, knots = 12) + ns(sb, knots = 75) + ns(pth, knots = 50) + partner + pkd + sex + smoking + modality"

# Develop model
fit_t1_12_mcs <- fit <- t1_dev(dat_imputed, "mcs_12_t1", form_rhs)

# Get predictions and make data frame
dat_prd <- t1_prd(dat_imputed, "mcs_12_t1", fit) %>%
    # Bind columns
    bind_cols() %>%
    # Add weights and observed value
    mutate(# IPCW
           w = ipcw(dat_imputed, "cens_12"),
           # True value
           true_y = filter(dat_imputed, .imp == 1)[["mcs_12_pooled"]])

# Calculate pseudo R-squared
r2 <- dat_prd %$% pseudo_r2(lps, fit[["scale"]])

 # Get model calibration
cal <- t1_cal(dat_prd, "12-month MCS score")

# Get cross-validation results
cv <- t1_cv(dat_imputed, "mcs_12_t1", "12-month MCS score", form_rhs)

# Create table section
tab_t1_12_mcs <- tibble(metric = c("Tobit type 1", "r2", "citl", "cslope"),
                       apparent_mcs_12 = c(NA, r2, cal[["citl"]], cal[["cslope"]]),
                       internal_mcs_12 = c(NA, cv[["r2"]], cv[["citl"]], cv[["cslope"]]))

# Store plots in specific names
p_app_t1_12_mcs <- cal[["plot"]]; p_int_t1_12_mcs <- cv[["plot"]]

```

### 4.2.2. Tobit type 2
```{r t2-12-mcs}
# Set right hand side of formula for selection model
selection_form_rhs <- "ns(age, knots = c(40, 80)) + sex + ns(hb, knots = c(5, 6.2, 8)) + ns(bpsyst, knots = 125) + bmi + ihd + malign + modality + dm + pkd + ns(pcs_0, knots = 35) + ns(mcs_0, knots = 55) + ns(sc, knots = c(9, 12)) + ns(sb, knots = c(25, 45))" 

# Set right hand side of formula for outcome model
outcome_form_rhs <- "ns(age, knots = 75) + ns(pcs_0, knots = 32) + mcs_0 + bmi + ihd + ns(hb, knots = c(5, 6.2, 8)) + ns(sc, knots = 12) + ns(sb, knots = 75) + ns(pth, knots = 50) + partner + pkd + sex + smoking + modality"

# Develop model
fit_t2_12_mcs <- fit <- t2_dev(dat_imputed, "mcs_12", selection_form_rhs, outcome_form_rhs)

# Get predictions and make data frame
dat_prd <- t2_prd(dat_imputed, "mcs_12", "cens_12", fit) %>%
    # Bind columns
    bind_cols() %>%
    # Add weights and observed value
    mutate(# IPCW 
           w = 1 / pr,
           # True value
           true_y = filter(dat_imputed, .imp == 1)[["mcs_12_pooled"]])

# Calculate pseudo R-squared
r2 <- dat_prd %$% pseudo_r2(lps_o, fit[["sigma_o"]])

# Get model calibration
cal <- t2_cal(dat_prd, "12-month MCS score", inset_coords = c(0.6, 0.0625, 0.975, 0.4))

# Get cross-validation results
cv <- t2_cv(dat_imputed, "mcs_12", "12-month MCS score", selection_form_rhs, outcome_form_rhs, inset_coords = c(0.6, 0.0625, 0.975, 0.4))

# Create table section
tab_t2_12_mcs <- tibble(metric = c("Tobit type 2", "o", "r2", "citl", "cslope", "s", "citl_s", "cslope_s", "c-statistic"),
                       apparent_mcs_12 = c(NA, NA, r2, cal[["citl_o"]], cal[["cslope_o"]], NA, cal[["citl_s"]], cal[["cslope_s"]], cal[["c"]]),
                       internal_mcs_12 = c(NA, NA, cv[["r2"]], cv[["citl_o"]], cv[["cslope_o"]], NA, cv[["citl_s"]], cv[["cslope_s"]], cv[["c"]]))

# Store outcome plots in specific names
p_app_t2_12_mcs_o <- cal[["plot_o"]]; p_int_t2_12_mcs_o <- cv[["plot_o"]]

# Store selection plots in specific names
p_app_t2_12_mcs_s <- cal[["plot_s"]]; p_int_t2_12_mcs_s <- cv[["plot_s"]]

# Combine tables
tab_12_mcs <- bind_rows(tab_t1_12_mcs, tab_t2_12_mcs)

# Combine tables
tab_12 <- bind_cols(tab_12_pcs, select(tab_12_mcs, apparent_mcs_12, internal_mcs_12))

```

# 5. Combine results
## 5.1 Tables
### 5.1.1. Performance
```{r performance table}
# Combine tables
tab_performance <- bind_cols(tab_6, select(tab_12, -metric))

# Kable table
kable(tab_performance)

```

### 5.1.2. Coefficients tables
```{r coefficients tables}
# Print outcome models for Tobit type 1 model
kable(map(ls()[str_detect(ls(), "fit_")], \(x){
    # Get model coefficients
    coefs <- get(x)[["coef"]]
    
    # If not empty, print which fit is returned
    if(!is.null(coefs)) print(x)
    
    # Return coefs
    return(coefs)
    }))

# Print outcome models for Tobit type 2 models
kable(map(ls()[str_detect(ls(), "fit_")], \(x){
    # Get model coefficients
    coefs <- get(x)[["coef_o"]]
    
    # If not empty, print which fit is returned
    if(!is.null(coefs)) print(x)
    
    # Return coefs
    return(coefs)
    }))

# Print selection models for Tobit type 2 models
kable(map(ls()[str_detect(ls(), "fit_")], \(x){
    # Get model coefficients
    coefs <- get(x)[["coef_s"]]
    
    # If not empty, print which fit is returned
    if(!is.null(coefs)) print(x)
    
    # Return coefs
    return(coefs)
    }))

```

### 5.1.3. Reasons for censoring
```{r censor reasons}
# Keep single imputation
dat_cens <- filter(dat_imputed, .imp == 1)

# Censored individuals at six months
n_six <- table(dat_cens[["cens_6"]])[["1"]]

# Censored individuals at twelve months
n_twelve <- table(dat_cens[["cens_12"]])[["1"]]

# Create dataframe with censoring distributions
tab_cens <- bind_cols(names(dat_cens %$% table(stop_red, cens_6)[, 2]),
                      dat_cens %$% table(stop_red, cens_6)[, 2],
                      dat_cens %$% table(stop_red, cens_12)[, 2]) %>%
    # Reset column names
    set_colnames(c("Reason", "six", "twelve")) %>%
    # Finalise table
    mutate(# Calculate proportion for six months
           prp_six = six / n_six,
           # Calculate proportion for twelve months
           prp_twelve = twelve / n_twelve,
           # Format six months
           `Six months` = paste0(six, " (", str_replace_all(format(round(prp_six * 100, 1), nsmall = 1), "\\s*", ""), ")"),
           `Twelve months` = paste0(twelve, " (", str_replace_all(format(round(prp_twelve * 100, 1), nsmall = 1), "\\s*", ""), ")")) %>%
    # Keep only relevant columns
    select(-c(six:prp_twelve))

# Kable table
kable(tab_cens)

```

## 5.2. Figures
### 5.2.1. 6 months
#### 5.2.1.1. Tobit type 1
```{r figures t1-6}
# Patch plots together
p <- wrap_plots(p_app_t1_6_pcs + ggtitle("Apparent"),    # PCS apparent
                p_int_t1_6_pcs + ggtitle("Internal"),    # PCS internal
                p_app_t1_6_mcs,                          # MCS apparent
                p_int_t1_6_mcs,                          # MCS internal
                ncol = 2,
                axes = "collect_y")

# Save figure
ggsave("cal_t1_6.png", p,
       path = figs,
       width = 8, height = 8,
       dpi = 600)

```

#### 5.2.1.1. Tobit type 2
```{r figures t2-6}
# Patch plots together for apparent validation
p <- wrap_plots(p_app_t2_6_pcs_o + ggtitle("Outcome"),      # PCS apparent
                p_app_t2_6_pcs_s,                           # PCS internal
                p_app_t2_6_mcs_o,                           # MCS apparent
                p_app_t2_6_mcs_s,                           # MCS internal
                ncol = 2)

# Save figure
ggsave("cal_t2_6_app.png", p,
       path = figs,
       width = 8, height = 8,
       dpi = 600)

# Patch plots together for internal validation
p <- wrap_plots(p_int_t2_6_pcs_o + ggtitle("Outcome"),      # PCS apparent
                p_int_t2_6_pcs_s,                           # PCS internal
                p_int_t2_6_mcs_o,                           # MCS apparent
                p_int_t2_6_mcs_s,                           # MCS internal
                ncol = 2)

# Save figure
ggsave("cal_t2_6_int.png", p,
       path = figs,
       width = 8, height = 8,
       dpi = 600)

```

### 5.2.2. 12 months
#### 5.2.2.1. Tobit type 1
```{r figures t1-12}
# Patch plots together
p <- wrap_plots(p_app_t1_12_pcs + ggtitle("Apparent"),    # PCS apparent
                p_int_t1_12_pcs + ggtitle("Internal"),    # PCS internal
                p_app_t1_12_mcs,                          # MCS apparent
                p_int_t1_12_mcs,                          # MCS internal
                ncol = 2,
                axes = "collect_y")

# Save figure
ggsave("cal_t1_12.png", p,
       path = figs,
       width = 8, height = 8,
       dpi = 600)

```

#### 5.2.2.1. Tobit type 2
```{r figures t2-12}
# Patch plots together for apparent validation
p <- wrap_plots(p_app_t2_12_pcs_o + ggtitle("Outcome"),      # PCS apparent
                p_app_t2_12_pcs_s,                           # PCS internal
                p_app_t2_12_mcs_o,                           # MCS apparent
                p_app_t2_12_mcs_s,                           # MCS internal
                ncol = 2)

# Save figure
ggsave("cal_t2_12_app.png", p,
       path = figs,
       width = 8, height = 8,
       dpi = 600)

# Patch plots together for internal validation
p <- wrap_plots(p_int_t2_12_pcs_o + ggtitle("Outcome"),      # PCS apparent
                p_int_t2_12_pcs_s,                           # PCS internal
                p_int_t2_12_mcs_o,                           # MCS apparent
                p_int_t2_12_mcs_s,                           # MCS internal
                ncol = 2)

# Save figure
ggsave("cal_t2_12_int.png", p,
       path = figs,
       width = 8, height = 8,
       dpi = 600)

```